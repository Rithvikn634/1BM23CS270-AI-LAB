import random

def create_initial_state(N):
    # Place one queen randomly in each column (row chosen randomly)
    return [random.randint(0, N - 1) for _ in range(N)]

def count_conflicts(state):
    """
    Calculate the number of pairs of queens that are attacking each other.
    """
    conflicts = 0
    N = len(state)
    for i in range(N):
        for j in range(i + 1, N):
            # Same row or same diagonal?
            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):
                conflicts += 1
    return conflicts

def get_neighbors(state):
    neighbors = []
    N = len(state)
    for col in range(N):
        for row in range(N):
            if row != state[col]:
                neighbor = list(state)
                neighbor[col] = row
                neighbors.append(neighbor)
    return neighbors

def hill_climbing(N, max_iterations=1000):
    current_state = create_initial_state(N)
    current_conflicts = count_conflicts(current_state)

    for _ in range(max_iterations):
        if current_conflicts == 0:
            return current_state  # Solution found

        neighbors = get_neighbors(current_state)
        neighbor_conflicts = [(count_conflicts(n), n) for n in neighbors]

        # Find neighbor with minimal conflicts
        min_conflicts, best_neighbor = min(neighbor_conflicts, key=lambda x: x[0])

        if min_conflicts >= current_conflicts:
            # No improvement, stuck in local optimum
            return None

        current_state = best_neighbor
        current_conflicts = min_conflicts

    return None  # No solution found within max_iterations

def print_board(state):
    N = len(state)
    for row in range(N):
        line = ""
        for col in range(N):
            if state[col] == row:
                line += "Q "
            else:
                line += ". "
        print(line)
    print(f"Conflicts: {count_conflicts(state)}")

# Example usage:
N = 8  # Change N as needed
solution = hill_climbing(N)

if solution:
    print("Solution found:")
    print_board(solution)
else:
    print("No solution found.")
